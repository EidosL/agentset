generator client {
    provider = "prisma-client-js"
}

generator json {
    provider = "prisma-json-types-generator"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id            String       @id
    name          String
    email         String
    emailVerified Boolean
    image         String?
    createdAt     DateTime
    updatedAt     DateTime
    sessions      Session[]
    accounts      Account[]
    members       Member[]
    invitations   Invitation[]

    @@unique([email])
    @@map("user")
}

model Session {
    id                   String   @id
    expiresAt            DateTime
    token                String
    createdAt            DateTime
    updatedAt            DateTime
    ipAddress            String?
    userAgent            String?
    userId               String
    user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    activeOrganizationId String?

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

model Organization {
    id          String               @id
    name        String
    slug        String?
    logo        String?
    createdAt   DateTime
    metadata    String?
    members     Member[]
    invitations Invitation[]
    namespaces  Namespace[]
    apiKeys     OrganizationApiKey[]

    @@unique([slug])
    @@map("organization")
}

model OrganizationApiKey {
    id             String       @id @default(cuid())
    key            String
    label          String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    scope          String

    @@unique([key])
}

enum ConnectionType {
    NOTION
    GOOGLE_DRIVE
    DROPBOX
    ONE_DRIVE
}

enum ConnectionStatus {
    PENDING
    CONNECTED
    FAILED
    REVOKED
}

model Connection {
    id   String @id @default(cuid())
    name String

    type   ConnectionType
    status ConnectionStatus @default(PENDING)

    statusDetails     String?
    clientRedirectUrl String?

    /// [ConnectionConfig]
    config Json?

    namespaceId String
    namespace   Namespace @relation(fields: [namespaceId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("connection")
}

model Namespace {
    id   String @id @default(cuid())
    name String
    slug String

    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    /// [NamespaceEmbeddingConfig]
    embeddingConfig Json?

    /// [NamespaceVectorStoreConfig]
    vectorStoreConfig Json?

    /// [NamespaceFileStoreConfig]
    fileStoreConfig Json?

    connections Connection[]
    ingestJobs  IngestJob[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([slug])
    @@map("namespace")
}

enum IngestJobStatus {
    QUEUED
    PRE_PROCESSING
    PROCESSING
    COMPLETED
    FAILED
    CANCELLED
}

model IngestJob {
    id          String    @id @default(cuid())
    namespaceId String
    namespace   Namespace @relation(fields: [namespaceId], references: [id], onDelete: Cascade)

    status IngestJobStatus @default(QUEUED)
    error  String?

    /// [IngestJobPayload]
    payload Json

    /// [IngestJobConfig]
    config Json?

    queuedAt        DateTime? @default(now())
    preProcessingAt DateTime?
    processingAt    DateTime?
    completedAt     DateTime?
    failedAt        DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("ingest_job")
}

model Member {
    id             String       @id
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    userId         String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    role           String
    createdAt      DateTime

    @@unique([organizationId, userId])
    @@map("member")
}

model Invitation {
    id             String       @id
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    email          String
    role           String?
    status         String
    expiresAt      DateTime
    inviterId      String
    user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

    @@map("invitation")
}
